{"version":3,"sources":["components/Firefly/Firefly.js","components/Display/Display.js","components/Controls/Controls.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Firefly","details","width","height","randomColor","useState","Math","floor","random","hue","setHue","allowRandom","setAllowRandom","pull","setPull","direction","setDirection","top","y","left","x","size","backgroundColor","boxShadow","styles","setStyles","updateFirefly","dirX","dirY","flickerOdds","dirChoice","calculateNewDirection","useEffect","interval","setInterval","clearInterval","className","style","Display","fireflies","map","firefly","index","Controls","fireflyCount","getCount","getRandomState","onClick","for","onChange","e","target","checked","id","type","name","App","window","innerWidth","setWidth","innerHeight","setHeight","setFireflies","setRandomColor","updateSize","addEventListener","length","newCount","fireflyArray","push","pop","isRandom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.caac7b8f.chunk.js","sourcesContent":["import \"./Firefly.css\";\nimport { useEffect, useState } from \"react\";\n\nexport default function Firefly ({ details, width, height, randomColor }) {\n\n    const [hue, setHue] = useState(randomColor ? Math.floor(Math.random() * 256) : 42);\n    const [allowRandom, setAllowRandom] = useState(!randomColor);\n    const [pull, setPull] = useState(1);\n    const [direction, setDirection] = useState(details.direction);\n    const [styles, setStyles] = useState({\n        top: details.y,\n        left: details.x,\n        width: details.size,\n        height: details.size,\n        backgroundColor: `hsl(${hue}, 98%, 62%)`,\n        boxShadow: `0 0 15px hsla(${hue}, 98%, 62%, 0.9), 0 0 40px hsla(${hue}, 97%, 70%, 0.776)`\n    });\n\n    function calculateY() {\n        if (direction >= 15 && direction <= 165) {\n            return -1;\n        } else if (direction >= 195 && direction <= 345) {\n            return 1;\n        }\n        return 0;\n    }\n\n    function calculateX() {\n        if (direction >= 105 && direction <= 255) {\n            return -1;\n        } else if (direction >= 0 && direction <= 75) {\n            return 1;\n        } else if (direction >= 285 && direction <= 359) {\n            return 1;\n        }\n        return 0;\n    }\n\n    function calculateNewDirection() {\n        // Give the firefly a 4 in 5 chance of turning in the same direction\n        const dirChoice = Math.floor(Math.random() * 5);\n        if (pull === -1) {\n            if (dirChoice) {\n                return direction === 355 ? 0 : direction + 5;\n            } else {\n                setPull(1)\n                return direction === 0 ? 355 : direction - 5;\n            }\n        } else if (pull === 1) {\n            if (dirChoice) {\n                return direction === 0 ? 355 : direction - 5;\n            } else {\n                setPull(-1)\n                return direction === 355 ? 0 : direction + 5;\n            }\n        }\n    }\n\n    // Redirect firefly if it goes out of the bounds of the screen\n    function boundsRedirect() {\n        if (styles.left >= (width + 30)) {\n            setStyles({\n                ...styles,\n                left: -40\n            })\n        } else if (styles.left <= -50) {\n            setStyles({\n                ...styles,\n                left: width + 20\n            })\n        } else if (styles.top >= (height + 30)) {\n            setStyles({\n                ...styles,\n                top: -40\n            })\n        } else if (styles.top <= -50) {\n            setStyles({\n                ...styles,\n                top: height + 20\n            })\n        }\n    }\n\n    function randomColorLogic() {\n        if (!randomColor && !allowRandom) {\n            setHue(42);\n            setAllowRandom(true);\n        } else if (randomColor && allowRandom) {\n            setHue(Math.floor(Math.random() * 256))\n            setAllowRandom(false);\n        }\n    }\n\n    function updateFirefly() {\n        const dirX = calculateX();\n        const dirY = calculateY();\n        const flickerOdds = Math.floor(Math.random() * 10);\n        setDirection(calculateNewDirection());\n        randomColorLogic();\n        setStyles({\n            ...styles,\n            top: styles.top + dirY,\n            left: styles.left + dirX,\n            backgroundColor: `hsl(${hue}, 98%, 62%)`,\n            boxShadow: flickerOdds ? \n                `0 0 15px hsla(${hue}, 98%, 62%, 0.9), 0 0 40px hsla(${hue}, 97%, 70%, 0.776)` :\n                `0 0 5px hsla(${hue}, 98%, 62%, 0.9), 0 0 13px hsla(${hue}, 97%, 70%, 0.776)`\n        })\n        boundsRedirect();\n    }\n\n    // mounting and unmounting with timer\n    useEffect(() => {\n        const interval = setInterval(() => {\n            updateFirefly();\n        }, 50);\n        return () => clearInterval(interval);\n    })\n\n\n\n    return <div className=\"firefly\" style={ styles }></div>\n\n}","import React from 'react';\nimport \"./Display.css\";\nimport Firefly from \"../Firefly/Firefly\";\n\nexport default function Display ({ fireflies, width, height, randomColor }) {\n\n    return (\n        <div className=\"display\">\n            {\n                fireflies.map((firefly, index) => {\n                    return <Firefly details={firefly} width={width} height={height} randomColor={randomColor} />\n                })\n            }\n        </div>\n    )\n}","import \"./Controls.css\";\n\nexport default function Controls ( { fireflyCount, getCount, getRandomState }) { \n\n    function handleRemoveFirefly() {\n        getCount(fireflyCount - 1);\n    }\n\n    function handleAddFirefly() {\n        getCount(fireflyCount + 1);\n    }\n\n    function handleRandomClick(e) {\n        getRandomState(e.target.checked);\n    }\n\n    return (\n        <div className=\"controls\">\n            <button onClick={handleAddFirefly}>Add Firefly</button>\n            <button onClick={handleRemoveFirefly}>Remove Firefly</button>\n            <p className=\"count\">{fireflyCount} {fireflyCount === 1 ? \"Firefly\" : \"Fireflies\"}</p>\n            <div className=\"randomCheckbox\">\n                <label for=\"randomColor\">Random Color</label>\n                <input onChange={handleRandomClick} id=\"randomColor\" type=\"checkbox\" name=\"randomColor\" />\n            </div>\n        </div>\n    )\n}","import './App.css';\nimport Display from \"../Display/Display\";\nimport Controls from \"../Controls/Controls\";\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  // Component State\n  const [width, setWidth] = useState(window.innerWidth);\n  const [height, setHeight] = useState(window.innerHeight);\n  const [fireflies, setFireflies] = useState([]);\n  const [randomColor, setRandomColor] = useState(false);\n\n  // Update the width and height state of display\n  function updateSize() {\n    setWidth(window.innerWidth);\n    setHeight(window.innerHeight);\n  }\n\n  // Function lifts count from Controls component\n  function getCount(newCount) {\n    if (newCount > fireflies.length) {\n      const fireflyArray = [...fireflies];\n      fireflyArray.push({\n        x: Math.floor(Math.random() * window.innerWidth),\n        y: Math.floor(Math.random() * window.innerHeight),\n        size: Math.floor(Math.random() * 10) + 5,\n        direction: Math.floor(Math.random() * 72) * 5\n      })\n      setFireflies(fireflyArray)\n    } else {\n      const fireflyArray = [...fireflies];\n      fireflyArray.pop();\n      setFireflies(fireflyArray);\n    }\n  }\n\n  // Function to handle clicks on the random color checkbox\n  function getRandomState(isRandom) {\n    setRandomColor(isRandom);\n  }\n\n  // Listen for any changes to display size\n  useEffect(() => {\n    window.addEventListener('resize', updateSize);\n    setFireflies([\n    {\n      x: Math.floor(Math.random() * window.innerWidth),\n      y: Math.floor(Math.random() * window.innerHeight),\n      size: Math.floor(Math.random() * 10) + 5,\n      direction: Math.floor(Math.random() * 120) * 3\n    }\n    ])\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Controls fireflyCount={fireflies.length} getCount={getCount} getRandomState={getRandomState} />\n      <Display fireflies={fireflies} width={width} height={height} randomColor={randomColor} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}